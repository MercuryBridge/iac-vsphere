name: Ansible Pipeline for Decom VM
run-name: >
  VM information : ${{ inputs.vm_name }} - ${{ inputs.vm_ipv4 }} - 
  Site : ${{ inputs.build_site }} - 
  Branch : ${{ github.ref_name }}

on:
  workflow_dispatch:
    inputs:

      build_site:
        type: choice
        description: "Environments for deployment. Used for Github Action.(e.g. SAT, PRD...)"
        required: true
        default: "sat-sg1n"
        options:
          - "sat-sg1n"
          - "prd-sg1n"

      decom_action:
        type: choice
        description: "Select the decommission action: disconnect network, power off, or delete VM"
        required: true
        default: "disconnect_network"
        options:
          - "disconnect_network"
          - "power_off_vm"
          - "delete_vm"

      change_request_number: 
        description: "Enter the ServiceNow Change Request number (e.g., CHG0031265)"
        required: true
        default: "CHG0031265"

      vm_name: 
        description: "Enter the VM Name."
        required: true
        default: ""

      vm_ipv4:
        description: "Enter the VM IPv4."
        required: true
        default: ""

permissions:
  contents: read
  packages: read

env:
  ANSIBLE_COLLECTIONS_PATHS: /root/.ansible/collections:/usr/share/ansible/collections

jobs:
  pre:
    runs-on: [self-hosted]
    container:
      image: ubuntu:20.04
    steps:
      - uses: actions/checkout@v4
      - name: Load env
        run: |
          grep -v -e '^\s*#' -e '^\s*$' "build-env/${{ inputs.build_site }}.env" >> "$GITHUB_ENV"
      - name: Debug env
        run: |
          echo "RUNNER_IMAGE=${RUNNER_IMAGE}"
          echo "RUNNER_TAG=${RUNNER_TAG}"
      - id: set_pre_outputs
        run: |
          echo "ansible_image=${RUNNER_IMAGE}" >> "$GITHUB_OUTPUT"
          echo "ansible_runner=${RUNNER_TAG}"   >> "$GITHUB_OUTPUT"
    outputs:
      ansible_image: ${{ steps.set_pre_outputs.outputs.ansible_image }}
      ansible_runner: ${{ steps.set_pre_outputs.outputs.ansible_runner }}

  # Kiểm tra ảnh có sẵn trên đúng runner (chạy TRÊN HOST, không chạy trong container)
  check-image-on-runner:
    needs: pre
    runs-on:
      - self-hosted
      - Linux
      - X64
      - ${{ needs.pre.outputs.ansible_runner }}
    steps:
      - name: Which runner & docker images
        run: |
          echo "Runner name: ${{ runner.name }}"
          echo "Runner os/arch: ${{ runner.os }} / ${{ runner.arch }}"
          docker image ls | grep 'ghcr.io/mercurybridge/iac-vsphere' || true

  # Smoke test: chạy BÊN TRONG image Ansible của bạn
  smoke:
    needs: [pre, check-image-on-runner]
    runs-on:
      - self-hosted
      - Linux
      - X64
      - ${{ needs.pre.outputs.ansible_runner }}
    container:
      image: ${{ needs.pre.outputs.ansible_image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Print who/where
        run: |
          echo "Runner: ${{ runner.name }}"
          uname -a
          cat /etc/hostname || true
      - name: Check ansible
        run: |
          ansible --version || which ansible || true

  validate-vm-information:
    needs: [smoke]
    runs-on: [self-hosted, "${{ needs.pre.outputs.ansible_runner }}"]
    environment: "${{ inputs.build_site }}-validation"
    container:
          image: "${{ needs.pre.outputs.ansible_image }}"
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - /opt/ssh_key/private_ssh_key:/github/workspace/ansible/private_ssh_key:ro
          credentials:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load env from default location
        run: >-
          grep -v -e '^\s*#' -e '^\s*$' "build-env/${{ inputs.build_site }}.env"
          >> $GITHUB_ENV

      # DEBUG
      - name: Print env
        run: |
          printenv

      # DEBUG
      - name: Print ansible version
        run: |
          ansible-playbook --version
          ansible-galaxy role list || true
          ansible-galaxy collection list || true

      - name: Ansible check
        id: ansible_check
        working-directory: ansible/
        run: >-
          ansible-playbook
          -i inventories/${{ inputs.build_site }}/hosts
          -e "decom_run_phase=validate"
          -e "decom_action=${{ inputs.decom_action }}"
          -e "change_request_number=${{ inputs.change_request_number }}"
          -e "vm_name=${{ inputs.vm_name }}"
          -e "vm_ipv4=${{ inputs.vm_ipv4 }}"
          vcenter_decom_vm.yaml

  ansible-decom-vm:
    needs: [pre, validate-vm-information]
    runs-on: [self-hosted, "${{ needs.pre.outputs.ansible_runner }}"]
    environment: "${{ inputs.build_site }}-approved"
    container:
          image: "${{ needs.pre.outputs.ansible_image }}"
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - /opt/ssh_key/private_ssh_key:/github/workspace/ansible/private_ssh_key:ro
          credentials:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load env from default location
        run: >-
          grep -v -e '^\s*#' -e '^\s*$' "build-env/${{ inputs.build_site }}.env"
          >> $GITHUB_ENV

      - name: Ansible run
        env:
          ANSIBLE_HASHI_VAULT_ADDR: ${{ secrets.ANSIBLE_HASHI_VAULT_ADDR }}
          ANSIBLE_HASHI_VAULT_TOKEN: ${{ secrets.ANSIBLE_HASHI_VAULT_TOKEN }}
        id: ansible_run
        working-directory: ansible/
        run: >-
          ansible-playbook
          -i inventories/${{ inputs.build_site }}/hosts
          -e "decom_run_phase=execute"
          -e "decom_action=${{ inputs.decom_action }}"
          -e "change_request_number=${{ inputs.change_request_number }}"
          -e "vm_name=${{ inputs.vm_name }}"
          -e "vm_ipv4=${{ inputs.vm_ipv4 }}"
          -e "workflow_initiator=${{ github.actor }}"
          vcenter_decom_vm.yaml
