---

- name: Read VM data CSV file
  set_fact:
    _csv_content: >-
      {{ lookup('file', inventory_dir ~ '/vm_data.csv') }}
  delegate_to: localhost

- name: Get CSV header
  set_fact:
    _csv_headers: "{{ (_csv_content.splitlines()[0]).split(',') }}"
  delegate_to: localhost

- name: Parse CSV manually
  set_fact:
    _csv_data: >-
      {{ _csv_data | default([]) + [dict(_csv_headers |
      zip(line.split(',')))] }}
  loop: "{{ _csv_content.split('\n')[1:] }}"
  loop_control:
    loop_var: line
  when: line | trim | length > 0
  delegate_to: localhost

- name: Split VMs by state
  set_fact:
    _active_list_dns: >-
      {{ _csv_data | rejectattr('vm_state', 'in', ['delete','del']) | list }}
    _delete_vms: >-
      {{ _csv_data | selectattr('vm_state', 'in', ['delete','del']) | list }}
  delegate_to: localhost

- name: Get zones
  set_fact:
    _unique_zones: >-
      {{ _csv_data | map(attribute='vm_dns_zone') | unique | list }}
  delegate_to: localhost

- name: Get ALL A records for all zones
  ansible.windows.win_shell: |
    $results = @()
    $zones = @("{{ _unique_zones | join('","') }}")
    foreach ($zone in $zones) {
      try {
        $records = Get-DnsServerResourceRecord -ZoneName $zone -RRType A -ErrorAction Stop
        foreach ($record in $records) {
          $results += "$zone::$($record.HostName)::$($record.RecordData.IPv4Address)"
        }
      } catch {
        Write-Host "Zone $zone not found or error: $_"
      }
    }
    $results
  register: _all_zone_records

- name: Parse DNS records from all zones
  set_fact:
    _current_dns: >-
      {{ _current_dns | default([]) + [{
        'zone': item.split('::')[0],
        'hostname': item.split('::')[1],
        'ip': item.split('::')[2]
      }] }}
  loop: "{{ _all_zone_records.stdout_lines }}"
  when:
    - _all_zone_records.stdout_lines | length > 0
    - item | length > 0
    - "'::' in item"

- name: Find missing DNS records
  set_fact:
    _missing_dns: >-
      {{ _active_list_dns | rejectattr('vm_name', 'in', _current_dns_hostnames) |
      list }}
  vars:
    _current_dns_hostnames: >-
      {{ _current_dns | map(attribute='hostname') | list }}

- name: Find extra DNS records
  set_fact:
    _drift_dns: >-
      {{ _current_dns | rejectattr('hostname', 'in', _csv_hostnames) |
      rejectattr('hostname', 'in', _skip_dns_records) | list }}
  vars:
    _csv_hostnames: >-
      {{ _active_list_dns | map(attribute='vm_name') | list }}

- name: Initialize IP mismatches
  set_fact:
    _ip_mismatches: []

- name: Check for IP mismatches
  set_fact:
    _ip_mismatches: >-
      {{ _ip_mismatches | default([]) + [{'csv': _csv_vm, 'dns': _dns_vm}] }}
  loop: "{{ _active_list_dns }}"
  loop_control:
    loop_var: _csv_vm
  vars:
    _dns_vm: >-
      {{ _current_dns | selectattr('hostname', 'equalto', _csv_vm.vm_name) |
      first | default({}) }}
  when:
    - _dns_vm.ip is defined
    - _dns_vm.ip != _csv_vm.vm_ip_addr

- name: Update DNS records with wrong IPs
  ansible.windows.win_shell: |
    $zone = "{{ item.csv.vm_dns_zone }}"
    $name = "{{ item.csv.vm_name }}"
    $newIp = "{{ item.csv.vm_ip_addr }}"
    $oldIp = "{{ item.dns.ip }}"

    Remove-DnsServerResourceRecord `
      -ZoneName $zone -Name $name -RRType A `
      -Force -ErrorAction SilentlyContinue

    $o = $oldIp.Split('.')
    if ($o.Count -eq 4) {
      $oldRev = "$($o[2]).$($o[1]).$($o[0]).in-addr.arpa"
      $oldPtrNm = $o[3]
      Remove-DnsServerResourceRecord `
        -ZoneName $oldRev -Name $oldPtrNm -RRType PTR `
        -Force -ErrorAction SilentlyContinue
    }

    Add-DnsServerResourceRecordA `
      -ZoneName $zone -Name $name -IPv4Address $newIp -CreatePtr
  loop: "{{ _ip_mismatches }}"
  when: _ip_mismatches | length > 0

- name: Remove DNS records marked as delete/drift
  ansible.windows.win_shell: |
    $zone = "{{ item.zone }}"
    $name = "{{ item.hostname }}"
    $ip = "{{ item.ip }}"

    Remove-DnsServerResourceRecord `
      -ZoneName $zone -Name $name -RRType A `
      -Force -ErrorAction SilentlyContinue

    $o = $ip.Split('.')
    if ($o.Count -eq 4) {
      $oldRev = "$($o[2]).$($o[1]).$($o[0]).in-addr.arpa"
      $oldPtrNm = $o[3]
      Remove-DnsServerResourceRecord `
        -ZoneName $oldRev -Name $oldPtrNm -RRType PTR `
        -Force -ErrorAction SilentlyContinue
    }
  loop: "{{ _drift_dns }}"
  when: _drift_dns | length > 0

- name: Create missing DNS A records
  ansible.windows.win_shell: |
    Add-DnsServerResourceRecordA `
      -ZoneName "{{ item.vm_dns_zone }}" `
      -Name "{{ item.vm_name }}" `
      -IPv4Address "{{ item.vm_ip_addr }}" `
      -CreatePtr
  loop: "{{ _missing_dns }}"
  when: _missing_dns | length > 0

- name: Final DNS report
  debug:
    msg: |-
      DNS Management Summary:
      - Processed zones: {{ _unique_zones | join(', ') }}
      - Created: {{ _missing_dns | length }} DNS records
      - Updated: {{ _ip_mismatches | length }} DNS records
      - Removed/Drift: {{ _drift_dns | length }} DNS records
      - Total CSV entries: {{ _csv_data | length }}
